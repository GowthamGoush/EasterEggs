{"mappings":"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","sources":["<anon>","src/main.js","src/models/game.js","src/models/player.js","src/utils/player_utils.js","src/models/obstacle.js","src/models/egg.js","src/models/larva.js","src/models/toad.js","src/utils/common_utils.js","src/utils/game_utils.js","src/constants/game_constants.js"],"sourcesContent":["const $9d07393aaa24a623$export$63c0fd2415399f0d = (dx, dy)=>{\n    const angleInRadians = Math.atan2(dy, dx);\n    if (angleInRadians < -2.74 || angleInRadians > 2.74) return 6;\n    if (angleInRadians < -1.96) return 7;\n    if (angleInRadians < -1.17) return 0;\n    if (angleInRadians < -0.39) return 1;\n    if (angleInRadians < 0.39) return 2;\n    if (angleInRadians < 1.17) return 3;\n    if (angleInRadians < 1.96) return 4;\n    if (angleInRadians < 2.74) return 5;\n};\n\n\nclass $0017c5d798155445$export$2616165974278734 {\n    constructor(game){\n        this.game = game;\n        this.image = document.getElementById(\"bull\");\n        this.collisionX = game.mouse.posX;\n        this.collisionY = game.mouse.posY;\n        this.collisionRadius = 30;\n        this.dx = 0;\n        this.dy = 0;\n        this.speedX = 0;\n        this.speedY = 0;\n        this.speedModifier = 5;\n        this.playerWidth = 255;\n        this.playerheight = 256;\n        this.width = this.playerWidth;\n        this.height = this.playerheight;\n        this.spriteX;\n        this.spriteY;\n        this.frameX = 0;\n        this.frameY = 0;\n    }\n    draw(context) {\n        context.drawImage(this.image, this.frameX * this.playerWidth, this.frameY * this.playerheight, this.playerWidth, this.playerheight, this.spriteX, this.spriteY, this.width, this.height);\n        if (this.game.debug) {\n            context.beginPath();\n            context.arc(this.collisionX, this.collisionY, this.collisionRadius, 0, Math.PI * 2);\n            context.save();\n            context.globalAlpha = 0.5;\n            context.fill();\n            context.restore();\n            context.moveTo(this.game.mouse.posX, this.game.mouse.posY);\n            context.lineTo(this.collisionX, this.collisionY);\n            context.stroke();\n        }\n    }\n    update() {\n        this.dx = this.game.mouse.posX - this.collisionX;\n        this.dy = this.game.mouse.posY - this.collisionY;\n        this.frameY = (0, $9d07393aaa24a623$export$63c0fd2415399f0d)(this.dx, this.dy);\n        const distance = Math.hypot(this.dx, this.dy);\n        if (distance > this.speedModifier) {\n            this.speedX = this.dx / distance || 0;\n            this.speedY = this.dy / distance || 0;\n        } else {\n            this.speedX = 0;\n            this.speedY = 0;\n        }\n        this.collisionX += this.speedX * this.speedModifier;\n        this.collisionY += this.speedY * this.speedModifier;\n        /**\n     * Horizontal boundary\n     */ if (this.collisionX < this.collisionRadius) this.collisionX = this.collisionRadius;\n        else if (this.collisionX > this.game.width - this.collisionRadius) this.collisionX = this.game.width - this.collisionRadius;\n        /**\n     * Vertical boundary\n     */ if (this.collisionY < this.game.topMargin + this.collisionRadius) this.collisionY = this.game.topMargin + this.collisionRadius;\n        else if (this.collisionY > this.game.height - this.collisionRadius) this.collisionY = this.game.height - this.collisionRadius;\n        this.spriteX = this.collisionX - this.width * 0.5;\n        this.spriteY = this.collisionY - this.height * 0.5 - 80;\n        this.game.obstacles.forEach((obstacle)=>{\n            const { collision: collision, distance: distance, sumOfRadii: sumOfRadii, dx: dx, dy: dy } = this.game.checkCollision(this, obstacle);\n            if (collision) {\n                const unitX = dx / distance;\n                const unitY = dy / distance;\n                this.collisionX = obstacle.collisionX + (sumOfRadii + 1) * unitX;\n                this.collisionY = obstacle.collisionY + (sumOfRadii + 1) * unitY;\n            }\n        });\n    }\n}\n\n\nclass $64c0ae715ddfc4e3$var$Obstacle {\n    constructor(game, position){\n        this.game = game;\n        this.image = document.getElementById(\"obstacles\");\n        this.collisionX = position.posX;\n        this.collisionY = position.posY;\n        this.obstacleWidth = 250;\n        this.obstacleHeight = 250;\n        this.width = this.obstacleWidth;\n        this.height = this.obstacleHeight;\n        this.spriteX = this.collisionX - this.width * 0.5;\n        this.spriteY = this.collisionY - this.width * 0.5 - 80;\n        this.frameX = Math.floor(Math.random() * 4);\n        this.frameY = Math.floor(Math.random() * 3);\n        this.collisionRadius = this.game.collisionRadius;\n    }\n    draw(context) {\n        context.drawImage(this.image, this.frameX * this.obstacleWidth, this.frameY * this.obstacleHeight, this.obstacleWidth, this.obstacleHeight, this.spriteX, this.spriteY, this.width, this.height);\n        if (this.game.debug) {\n            context.beginPath();\n            context.arc(this.collisionX, this.collisionY, this.collisionRadius, 0, Math.PI * 2);\n            context.save();\n            context.globalAlpha = 0.5;\n            context.fill();\n            context.restore();\n            context.stroke();\n        }\n    }\n    update() {}\n}\nvar $64c0ae715ddfc4e3$export$2e2bcd8739ae039 = $64c0ae715ddfc4e3$var$Obstacle;\n\n\nclass $3b186e545e47b541$var$Larva {\n    constructor(game, posX, posY){\n        this.game = game;\n        this.image = document.getElementById(\"larva\");\n        this.collisionRadius = 30;\n        this.speedY = Math.random() + 1;\n        this.spriteWidth = 150;\n        this.spriteHeight = 150;\n        this.width = this.spriteWidth;\n        this.height = this.spriteHeight;\n        this.collisionX = posX;\n        this.collisionY = posY;\n        this.spriteX = this.collisionX - this.width * 0.5;\n        this.spriteY = this.collisionY - this.height * 0.5 - 30;\n        this.frameX = 0;\n        this.frameY = Math.floor(Math.random() * 2);\n        this.markedForDeletion = false;\n    }\n    draw(context) {\n        context.drawImage(this.image, this.frameX * this.spriteWidth, this.frameY * this.spriteHeight, this.spriteWidth, this.spriteHeight, this.spriteX, this.spriteY, this.spriteWidth, this.spriteHeight);\n        if (this.game.debug) {\n            context.beginPath();\n            context.arc(this.collisionX, this.collisionY, this.collisionRadius, 0, Math.PI * 2);\n            context.save();\n            context.globalAlpha = 0.5;\n            context.fill();\n            context.restore();\n            context.stroke();\n        }\n    }\n    update() {\n        this.spriteX = this.collisionX - this.width * 0.5;\n        this.spriteY = this.collisionY - this.height * 0.5 - 40;\n        this.collisionY -= this.speedY;\n        /**\n     *  Check and remove #Larva when moves to safety\n     */ if (this.spriteY + (this.height - this.game.topMargin) < 0) {\n            this.markedForDeletion = true;\n            this.game.removeGameObjects();\n            if (!this.game.over) this.game.score++;\n        }\n        /**\n     *  Movement physics for #Larva on collision with #Player & #Obstacles\n     */ const collisionObjects = [\n            ...this.game.obstacles,\n            this.game.player\n        ];\n        collisionObjects.forEach((object)=>{\n            const { collision: collision, distance: distance, sumOfRadii: sumOfRadii, dx: dx, dy: dy } = this.game.checkCollision(this, object);\n            if (collision) {\n                const unitX = dx / distance;\n                const unitY = dy / distance;\n                this.collisionX = object.collisionX + (sumOfRadii + 1) * unitX;\n                this.collisionY = object.collisionY + (sumOfRadii + 1) * unitY;\n            }\n        });\n        /**\n     *  Movement physics for #Larva on collision with #Toads\n     */ const collisionEnemies = [\n            ...this.game.toads\n        ];\n        collisionEnemies.forEach((object)=>{\n            const { collision: collision } = this.game.checkCollision(this, object);\n            if (collision) {\n                this.markedForDeletion = true;\n                this.game.removeGameObjects();\n                this.game.lostHatchlings++;\n            }\n        });\n    }\n}\nvar $3b186e545e47b541$export$2e2bcd8739ae039 = $3b186e545e47b541$var$Larva;\n\n\nclass $82a7e179f894b03b$var$Egg {\n    constructor(game){\n        this.game = game;\n        this.image = document.getElementById(\"egg\");\n        this.collisionRadius = 30;\n        this.margin = this.collisionRadius * 2;\n        this.collisionX = this.margin + Math.random() * (this.game.width - this.margin * 2);\n        this.collisionY = this.game.topMargin + Math.random() * (this.game.height - this.game.topMargin - this.margin);\n        this.spriteWidth = 110;\n        this.spriteHeight = 135;\n        this.width = this.spriteWidth;\n        this.height = this.spriteHeight;\n        this.spriteX;\n        this.spriteY;\n        this.hatchTimer = 0;\n        this.hatchInterval = 10000;\n        this.markedForDeletion = false;\n    }\n    draw(context) {\n        context.drawImage(this.image, this.spriteX, this.spriteY);\n        if (this.game.debug) {\n            context.beginPath();\n            context.arc(this.collisionX, this.collisionY, this.collisionRadius, 0, Math.PI * 2);\n            context.save();\n            context.globalAlpha = 0.5;\n            context.fill();\n            context.restore();\n            context.stroke();\n            const displayTime = (this.hatchTimer * 0.001).toFixed(0);\n            context.fillText(displayTime, this.collisionX, this.collisionY - this.collisionRadius * 2.5);\n        }\n    }\n    update(deltaTime) {\n        this.spriteX = this.collisionX - this.width * 0.5;\n        this.spriteY = this.collisionY - this.height * 0.5 - 30;\n        const collisionObjects = [\n            ...this.game.obstacles,\n            ...this.game.toads,\n            ...this.game.hatchlings,\n            this.game.player\n        ];\n        collisionObjects.forEach((obstacle)=>{\n            const { collision: collision, distance: distance, sumOfRadii: sumOfRadii, dx: dx, dy: dy } = this.game.checkCollision(this, obstacle);\n            if (collision) {\n                const unitX = dx / distance;\n                const unitY = dy / distance;\n                this.collisionX = obstacle.collisionX + (sumOfRadii + 1) * unitX;\n                this.collisionY = obstacle.collisionY + (sumOfRadii + 1) * unitY;\n            }\n        });\n        if ((this.hatchTimer > this.hatchInterval || this.collisionY < this.game.topMargin) && !this.game.over) {\n            this.game.hatchlings.push(new (0, $3b186e545e47b541$export$2e2bcd8739ae039)(this.game, this.collisionX, this.collisionY));\n            this.markedForDeletion = true;\n            this.game.removeGameObjects();\n        } else this.hatchTimer += deltaTime;\n    }\n}\nvar $82a7e179f894b03b$export$2e2bcd8739ae039 = $82a7e179f894b03b$var$Egg;\n\n\nclass $dcb2be3ebd4ef55d$var$Toad {\n    constructor(game){\n        this.game = game;\n        this.image = document.getElementById(\"toad\");\n        this.collisionRadius = 30;\n        this.speedX = Math.random() * 3 + 0.5;\n        this.margin = this.collisionRadius * 2;\n        this.spriteWidth = 140;\n        this.spriteHeight = 260;\n        this.width = this.spriteWidth;\n        this.height = this.spriteHeight;\n        this.collisionX = this.game.width + this.width + Math.random() * this.game.width * 0.5;\n        this.collisionY = this.game.topMargin + Math.random() * (this.game.height - this.game.topMargin - this.margin);\n        this.spriteX = this.collisionX - this.width * 0.5;\n        this.spriteY = this.collisionY - this.height * 0.5 - 30;\n        this.frameX = 0;\n        this.frameY = Math.floor(Math.random() * 4);\n    }\n    draw(context) {\n        context.drawImage(this.image, this.frameX * this.spriteWidth, this.frameY * this.spriteHeight, this.spriteWidth, this.spriteHeight, this.spriteX, this.spriteY, this.spriteWidth, this.spriteHeight);\n        if (this.game.debug) {\n            context.beginPath();\n            context.arc(this.collisionX, this.collisionY, this.collisionRadius, 0, Math.PI * 2);\n            context.save();\n            context.globalAlpha = 0.5;\n            context.fill();\n            context.restore();\n            context.stroke();\n        }\n    }\n    update() {\n        this.spriteX = this.collisionX - this.width * 0.5;\n        this.spriteY = this.collisionY - this.height * 0.5 - 60;\n        this.collisionX -= this.speedX;\n        if (this.spriteX + this.width < 0 && !this.game.over) {\n            this.collisionX = this.game.width + this.width + Math.random() * this.game.width * 0.5;\n            this.collisionY = this.game.topMargin + Math.random() * (this.game.height - this.game.topMargin - this.margin);\n            this.frameY = Math.floor(Math.random() * 4);\n        }\n        const collisionObjects = [\n            ...this.game.obstacles,\n            this.game.player\n        ];\n        collisionObjects.forEach((obstacle)=>{\n            const { collision: collision, distance: distance, sumOfRadii: sumOfRadii, dx: dx, dy: dy } = this.game.checkCollision(this, obstacle);\n            if (collision) {\n                const unitX = dx / distance;\n                const unitY = dy / distance;\n                this.collisionX = obstacle.collisionX + (sumOfRadii + 1) * unitX;\n                this.collisionY = obstacle.collisionY + (sumOfRadii + 1) * unitY;\n            }\n        });\n    }\n}\nvar $dcb2be3ebd4ef55d$export$2e2bcd8739ae039 = $dcb2be3ebd4ef55d$var$Toad;\n\n\nconst $7fee6969fa349124$export$b11bd9a0808bdc9 = ({ context: context, content: content, posX: posX, posY: posY, align: align, fontStyle: fontStyle })=>{\n    context.font = fontStyle;\n    context.textAlign = align;\n    context.fillText(content, posX, posY);\n};\n\n\n/**\n *  Minimum required score for victory\n */ const $9d53a1b897a67ad9$export$6caa59613a7f1d16 = 30;\nconst $9d53a1b897a67ad9$export$bd8c95b582384de5 = 15;\n\n\nconst $384a512539b7cccf$export$6e76c1248b602b23 = ({ gameWidth: gameWidth, gameHeight: gameHeight, verticalMargin: verticalMargin = 0, horizontalMargin: horizontalMargin = 0, size: size, count: count, distanceBuffer: distanceBuffer = 0 })=>{\n    let positions = [];\n    for(let attemps = 0; attemps < 500 && count > 0; attemps++){\n        const posX = Math.random() * gameWidth;\n        const posY = Math.random() * gameHeight;\n        let hasOverlap = false;\n        for(let posIndex = 0; posIndex < positions.length; posIndex++){\n            const prevObstacle = positions[posIndex];\n            const dx = prevObstacle.posX - posX;\n            const dy = prevObstacle.posY - posY;\n            const distance = Math.hypot(dy, dx);\n            if (distance < Math.max(size * 2, distanceBuffer)) {\n                hasOverlap = true;\n                break;\n            }\n        }\n        if (!hasOverlap && posX > horizontalMargin + size * 2 && posY > verticalMargin + size * 2 && posX < gameWidth - size && posY < gameHeight) {\n            positions.push({\n                posX: posX,\n                posY: posY\n            });\n            count--;\n        }\n    }\n    return positions;\n};\nconst $384a512539b7cccf$export$9f1c65284a10fd65 = ({ score: score = 0, lostHatchlings: lostHatchlings = 0 })=>{\n    return score >= (0, $9d53a1b897a67ad9$export$6caa59613a7f1d16) || lostHatchlings >= (0, $9d53a1b897a67ad9$export$bd8c95b582384de5);\n};\nconst $384a512539b7cccf$export$97f8cbad1fae839b = ({ score: score = 0, lostHatchlings: lostHatchlings })=>{\n    const restartText = \"Press 'R' to restart the game\";\n    if (score >= (0, $9d53a1b897a67ad9$export$6caa59613a7f1d16)) return {\n        title: \"AWESOME!!!\",\n        description: `You nailed it with ${score} points!`,\n        restartText: restartText\n    };\n    if (score >= Math.floor((0, $9d53a1b897a67ad9$export$6caa59613a7f1d16) * 0.9)) return {\n        title: \"SO CLOSE!!!\",\n        description: `Almost there with ${score} points!`,\n        restartText: restartText\n    };\n    return {\n        title: \"OOPS!!!\",\n        description: `You lost ${lostHatchlings} hatchlings!`,\n        restartText: restartText\n    };\n};\n\n\nclass $55b76b594f4baf04$export$985739bfa5723e08 {\n    constructor(canvas){\n        this.canvas = canvas;\n        this.width = this.canvas.width;\n        this.height = this.canvas.height;\n        this.debug = false;\n        this.topMargin = 260;\n        this.obstaclesCount = 5;\n        this.collisionRadius = 60;\n        this.obstacleMinSpacing = 200;\n        this.obstacles = [];\n        this.eggs = [];\n        this.toads = [];\n        this.hatchlings = [];\n        this.eggTimer = 0;\n        this.eggInterval = 1000;\n        this.eggCountMax = 10;\n        this.toadCountMax = 5;\n        this.lostHatchlings = 0;\n        this.score = 0;\n        this.over = false;\n        this.mouse = {\n            posX: this.width * 0.5,\n            posY: this.height * 0.5,\n            pressed: false\n        };\n        this.player = new (0, $0017c5d798155445$export$2616165974278734)(this);\n        canvas.addEventListener(\"mousedown\", (e)=>{\n            this.mouse.posX = e.offsetX;\n            this.mouse.posY = e.offsetY;\n            this.mouse.pressed = true;\n        });\n        canvas.addEventListener(\"mousemove\", (e)=>{\n            if (this.mouse.pressed) {\n                this.mouse.posX = e.offsetX;\n                this.mouse.posY = e.offsetY;\n            }\n        });\n        canvas.addEventListener(\"mouseup\", (e)=>{\n            this.mouse.posX = e.offsetX;\n            this.mouse.posY = e.offsetY;\n            this.mouse.pressed = false;\n        });\n        window.addEventListener(\"keydown\", (e)=>{\n            if (e.key === \"d\") this.debug = !this.debug;\n        });\n    }\n    init() {\n        const obstaclesPositions = (0, $384a512539b7cccf$export$6e76c1248b602b23)({\n            gameWidth: this.width,\n            gameHeight: this.height,\n            verticalMargin: this.topMargin,\n            size: this.collisionRadius,\n            count: this.obstaclesCount,\n            distanceBuffer: this.obstacleMinSpacing\n        });\n        obstaclesPositions.forEach((position)=>{\n            this.obstacles.push(new (0, $64c0ae715ddfc4e3$export$2e2bcd8739ae039)(this, position));\n        });\n        this.addToads();\n    }\n    addEgg() {\n        this.eggs.push(new (0, $82a7e179f894b03b$export$2e2bcd8739ae039)(this));\n    }\n    addToads() {\n        for(let count = 0; count < this.toadCountMax; count++)this.toads.push(new (0, $dcb2be3ebd4ef55d$export$2e2bcd8739ae039)(this));\n    }\n    removeGameObjects() {\n        this.eggs = this.eggs.filter((egg)=>!egg.markedForDeletion);\n        this.hatchlings = this.hatchlings.filter((hatchling)=>!hatchling.markedForDeletion);\n    }\n    checkCollision(objectA, objectB) {\n        const dx = objectA.collisionX - objectB.collisionX;\n        const dy = objectA.collisionY - objectB.collisionY;\n        const distance = Math.hypot(dy, dx);\n        const sumOfRadii = objectA.collisionRadius + objectB.collisionRadius;\n        return {\n            collision: distance < sumOfRadii,\n            distance: distance,\n            sumOfRadii: sumOfRadii,\n            dx: dx,\n            dy: dy\n        };\n    }\n    render(context, deltaTime) {\n        const gameObjects = [\n            ...this.obstacles,\n            ...this.eggs,\n            ...this.toads,\n            ...this.hatchlings,\n            this.player\n        ];\n        /**\n     *  Orders the rendering of objects based on Y-axis to provide pseudo 3D effect\n     */ gameObjects.sort((objectA, objectB)=>objectA.collisionY - objectB.collisionY);\n        gameObjects.forEach((object)=>{\n            object.draw(context);\n            object.update(deltaTime);\n        });\n        if (this.eggTimer > this.eggInterval && this.eggs.length < this.eggCountMax && !this.over) {\n            this.addEgg();\n            this.eggTimer = 0;\n        } else this.eggTimer += deltaTime;\n        context.save();\n        context.textAlign = \"left\";\n        context.fillText(`Score: ${this.score}`, 25, 50);\n        if (this.debug) context.fillText(`Lost: ${this.lostHatchlings}`, 25, 100);\n        context.restore();\n        if ((0, $384a512539b7cccf$export$9f1c65284a10fd65)({\n            score: this.score,\n            lostHatchlings: this.lostHatchlings\n        })) {\n            this.over = true;\n            context.save();\n            context.fillStyle = \"rgba(0,0,0,0.5)\";\n            context.fillRect(0, 0, this.width, this.height);\n            context.shadowColor = \"black\";\n            context.shadowOffsetX = 4;\n            context.shadowOffsetY = 4;\n            context.fillStyle = \"white\";\n            context.textAlign = \"center\";\n            const { title: title, description: description, restartText: restartText } = (0, $384a512539b7cccf$export$97f8cbad1fae839b)({\n                score: this.score,\n                lostHatchlings: this.lostHatchlings\n            });\n            (0, $7fee6969fa349124$export$b11bd9a0808bdc9)({\n                context: context,\n                content: title,\n                posX: this.width * 0.5,\n                posY: this.height * 0.4,\n                align: \"center\",\n                fontStyle: \"130px Hevetica\"\n            });\n            (0, $7fee6969fa349124$export$b11bd9a0808bdc9)({\n                context: context,\n                content: description,\n                posX: this.width * 0.5,\n                posY: this.height * 0.5,\n                align: \"center\",\n                fontStyle: \"40px Hevetica\"\n            });\n            (0, $7fee6969fa349124$export$b11bd9a0808bdc9)({\n                context: context,\n                content: restartText,\n                posX: this.width * 0.5,\n                posY: this.height * 0.95,\n                align: \"center\",\n                fontStyle: \"30px Hevetica\"\n            });\n            context.restore();\n        }\n    }\n}\n\n\nwindow.addEventListener(\"load\", function() {\n    const canvas = document.getElementById(\"game-canvas\");\n    const context = canvas.getContext(\"2d\");\n    canvas.width = 1280;\n    canvas.height = 720;\n    context.fillStyle = \"white\";\n    context.strokeStyle = \"white\";\n    context.font = \"40px Helvetica\";\n    context.textAlign = \"center\";\n    const game = new (0, $55b76b594f4baf04$export$985739bfa5723e08)(canvas);\n    game.init();\n    let lastTimeStamp = 0;\n    function animate(timestamp) {\n        const deltaTime = timestamp - lastTimeStamp;\n        lastTimeStamp = timestamp;\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        game.render(context, deltaTime);\n        window.requestAnimationFrame(animate);\n    }\n    animate(0);\n});\n\n\n//# sourceMappingURL=index.51f2a1fe.js.map\n","import { Game } from \"./models/game\";\n\nwindow.addEventListener(\"load\", function () {\n  const canvas = document.getElementById(\"game-canvas\");\n  const context = canvas.getContext(\"2d\");\n\n  canvas.width = 1280;\n  canvas.height = 720;\n\n  context.fillStyle = \"white\";\n  context.strokeStyle = \"white\";\n  context.font = \"40px Helvetica\";\n  context.textAlign = \"center\";\n\n  const game = new Game(canvas);\n  game.init();\n\n  let lastTimeStamp = 0;\n  function animate(timestamp) {\n    const deltaTime = timestamp - lastTimeStamp;\n    lastTimeStamp = timestamp;\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    game.render(context, deltaTime);\n    window.requestAnimationFrame(animate);\n  }\n\n  animate(0);\n});\n","import { Player } from \"./player\";\nimport Obstacle from \"./obstacle\";\nimport Egg from \"./egg\";\nimport Toad from \"./toad\";\n\nimport { drawText } from \"../utils/common_utils\";\nimport {\n  getGameOverContent,\n  getRandomPositionArray,\n  isGameOver,\n} from \"../utils/game_utils\";\n\nexport class Game {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.width = this.canvas.width;\n    this.height = this.canvas.height;\n    this.debug = false;\n    this.topMargin = 260;\n    this.obstaclesCount = 5;\n    this.collisionRadius = 60;\n    this.obstacleMinSpacing = 200;\n    this.obstacles = [];\n    this.eggs = [];\n    this.toads = [];\n    this.hatchlings = [];\n    this.eggTimer = 0;\n    this.eggInterval = 1000;\n    this.eggCountMax = 10;\n    this.toadCountMax = 5;\n    this.lostHatchlings = 0;\n    this.score = 0;\n    this.over = false;\n    this.mouse = {\n      posX: this.width * 0.5,\n      posY: this.height * 0.5,\n      pressed: false,\n    };\n    this.player = new Player(this);\n\n    canvas.addEventListener(\"mousedown\", (e) => {\n      this.mouse.posX = e.offsetX;\n      this.mouse.posY = e.offsetY;\n      this.mouse.pressed = true;\n    });\n    canvas.addEventListener(\"mousemove\", (e) => {\n      if (this.mouse.pressed) {\n        this.mouse.posX = e.offsetX;\n        this.mouse.posY = e.offsetY;\n      }\n    });\n    canvas.addEventListener(\"mouseup\", (e) => {\n      this.mouse.posX = e.offsetX;\n      this.mouse.posY = e.offsetY;\n      this.mouse.pressed = false;\n    });\n    window.addEventListener(\"keydown\", (e) => {\n      if (e.key === \"d\") this.debug = !this.debug;\n    });\n  }\n\n  init() {\n    const obstaclesPositions = getRandomPositionArray({\n      gameWidth: this.width,\n      gameHeight: this.height,\n      verticalMargin: this.topMargin,\n      size: this.collisionRadius,\n      count: this.obstaclesCount,\n      distanceBuffer: this.obstacleMinSpacing,\n    });\n\n    obstaclesPositions.forEach((position) => {\n      this.obstacles.push(new Obstacle(this, position));\n    });\n\n    this.addToads();\n  }\n\n  addEgg() {\n    this.eggs.push(new Egg(this));\n  }\n\n  addToads() {\n    for (let count = 0; count < this.toadCountMax; count++) {\n      this.toads.push(new Toad(this));\n    }\n  }\n\n  removeGameObjects() {\n    this.eggs = this.eggs.filter((egg) => !egg.markedForDeletion);\n    this.hatchlings = this.hatchlings.filter(\n      (hatchling) => !hatchling.markedForDeletion\n    );\n  }\n\n  checkCollision(objectA, objectB) {\n    const dx = objectA.collisionX - objectB.collisionX;\n    const dy = objectA.collisionY - objectB.collisionY;\n\n    const distance = Math.hypot(dy, dx);\n    const sumOfRadii = objectA.collisionRadius + objectB.collisionRadius;\n\n    return { collision: distance < sumOfRadii, distance, sumOfRadii, dx, dy };\n  }\n\n  render(context, deltaTime) {\n    const gameObjects = [\n      ...this.obstacles,\n      ...this.eggs,\n      ...this.toads,\n      ...this.hatchlings,\n      this.player,\n    ];\n\n    /**\n     *  Orders the rendering of objects based on Y-axis to provide pseudo 3D effect\n     */\n    gameObjects.sort(\n      (objectA, objectB) => objectA.collisionY - objectB.collisionY\n    );\n\n    gameObjects.forEach((object) => {\n      object.draw(context);\n      object.update(deltaTime);\n    });\n\n    if (\n      this.eggTimer > this.eggInterval &&\n      this.eggs.length < this.eggCountMax &&\n      !this.over\n    ) {\n      this.addEgg();\n      this.eggTimer = 0;\n    } else {\n      this.eggTimer += deltaTime;\n    }\n\n    context.save();\n    context.textAlign = \"left\";\n    context.fillText(`Score: ${this.score}`, 25, 50);\n\n    if (this.debug) {\n      context.fillText(`Lost: ${this.lostHatchlings}`, 25, 100);\n    }\n\n    context.restore();\n\n    if (\n      isGameOver({ score: this.score, lostHatchlings: this.lostHatchlings })\n    ) {\n      this.over = true;\n\n      context.save();\n      context.fillStyle = \"rgba(0,0,0,0.5)\";\n      context.fillRect(0, 0, this.width, this.height);\n\n      context.shadowColor = \"black\";\n      context.shadowOffsetX = 4;\n      context.shadowOffsetY = 4;\n\n      context.fillStyle = \"white\";\n      context.textAlign = \"center\";\n\n      const { title, description, restartText } = getGameOverContent({\n        score: this.score,\n        lostHatchlings: this.lostHatchlings,\n      });\n\n      drawText({\n        context: context,\n        content: title,\n        posX: this.width * 0.5,\n        posY: this.height * 0.4,\n        align: \"center\",\n        fontStyle: \"130px Hevetica\",\n      });\n\n      drawText({\n        context: context,\n        content: description,\n        posX: this.width * 0.5,\n        posY: this.height * 0.5,\n        align: \"center\",\n        fontStyle: \"40px Hevetica\",\n      });\n\n      drawText({\n        context: context,\n        content: restartText,\n        posX: this.width * 0.5,\n        posY: this.height * 0.95,\n        align: \"center\",\n        fontStyle: \"30px Hevetica\",\n      });\n\n      context.restore();\n    }\n  }\n}\n","import { getPlayerPositionIndex } from \"../utils/player_utils\";\n\nexport class Player {\n  constructor(game) {\n    this.game = game;\n    this.image = document.getElementById(\"bull\");\n    this.collisionX = game.mouse.posX;\n    this.collisionY = game.mouse.posY;\n    this.collisionRadius = 30;\n    this.dx = 0;\n    this.dy = 0;\n    this.speedX = 0;\n    this.speedY = 0;\n    this.speedModifier = 5;\n    this.playerWidth = 255;\n    this.playerheight = 256;\n    this.width = this.playerWidth;\n    this.height = this.playerheight;\n    this.spriteX;\n    this.spriteY;\n    this.frameX = 0;\n    this.frameY = 0;\n  }\n\n  draw(context) {\n    context.drawImage(\n      this.image,\n      this.frameX * this.playerWidth,\n      this.frameY * this.playerheight,\n      this.playerWidth,\n      this.playerheight,\n      this.spriteX,\n      this.spriteY,\n      this.width,\n      this.height\n    );\n\n    if (this.game.debug) {\n      context.beginPath();\n      context.arc(\n        this.collisionX,\n        this.collisionY,\n        this.collisionRadius,\n        0,\n        Math.PI * 2\n      );\n      context.save();\n\n      context.globalAlpha = 0.5;\n\n      context.fill();\n\n      context.restore();\n      context.moveTo(this.game.mouse.posX, this.game.mouse.posY);\n      context.lineTo(this.collisionX, this.collisionY);\n      context.stroke();\n    }\n  }\n\n  update() {\n    this.dx = this.game.mouse.posX - this.collisionX;\n    this.dy = this.game.mouse.posY - this.collisionY;\n\n    this.frameY = getPlayerPositionIndex(this.dx, this.dy);\n\n    const distance = Math.hypot(this.dx, this.dy);\n\n    if (distance > this.speedModifier) {\n      this.speedX = this.dx / distance || 0;\n      this.speedY = this.dy / distance || 0;\n    } else {\n      this.speedX = 0;\n      this.speedY = 0;\n    }\n\n    this.collisionX += this.speedX * this.speedModifier;\n    this.collisionY += this.speedY * this.speedModifier;\n\n    /**\n     * Horizontal boundary\n     */\n    if (this.collisionX < this.collisionRadius) {\n      this.collisionX = this.collisionRadius;\n    } else if (this.collisionX > this.game.width - this.collisionRadius) {\n      this.collisionX = this.game.width - this.collisionRadius;\n    }\n\n    /**\n     * Vertical boundary\n     */\n    if (this.collisionY < this.game.topMargin + this.collisionRadius) {\n      this.collisionY = this.game.topMargin + this.collisionRadius;\n    } else if (this.collisionY > this.game.height - this.collisionRadius) {\n      this.collisionY = this.game.height - this.collisionRadius;\n    }\n\n    this.spriteX = this.collisionX - this.width * 0.5;\n    this.spriteY = this.collisionY - this.height * 0.5 - 80;\n\n    this.game.obstacles.forEach((obstacle) => {\n      const { collision, distance, sumOfRadii, dx, dy } =\n        this.game.checkCollision(this, obstacle);\n\n      if (collision) {\n        const unitX = dx / distance;\n        const unitY = dy / distance;\n\n        this.collisionX = obstacle.collisionX + (sumOfRadii + 1) * unitX;\n        this.collisionY = obstacle.collisionY + (sumOfRadii + 1) * unitY;\n      }\n    });\n  }\n}\n","export const getPlayerPositionIndex = (dx, dy) => {\n  const angleInRadians = Math.atan2(dy, dx);\n\n  if (angleInRadians < -2.74 || angleInRadians > 2.74) return 6;\n  if (angleInRadians < -1.96) return 7;\n  if (angleInRadians < -1.17) return 0;\n  if (angleInRadians < -0.39) return 1;\n  if (angleInRadians < 0.39) return 2;\n  if (angleInRadians < 1.17) return 3;\n  if (angleInRadians < 1.96) return 4;\n  if (angleInRadians < 2.74) return 5;\n};\n","class Obstacle {\n  constructor(game, position) {\n    this.game = game;\n    this.image = document.getElementById(\"obstacles\");\n    this.collisionX = position.posX;\n    this.collisionY = position.posY;\n    this.obstacleWidth = 250;\n    this.obstacleHeight = 250;\n    this.width = this.obstacleWidth;\n    this.height = this.obstacleHeight;\n    this.spriteX = this.collisionX - this.width * 0.5;\n    this.spriteY = this.collisionY - this.width * 0.5 - 80;\n    this.frameX = Math.floor(Math.random() * 4);\n    this.frameY = Math.floor(Math.random() * 3);\n    this.collisionRadius = this.game.collisionRadius;\n  }\n\n  draw(context) {\n    context.drawImage(\n      this.image,\n      this.frameX * this.obstacleWidth,\n      this.frameY * this.obstacleHeight,\n      this.obstacleWidth,\n      this.obstacleHeight,\n      this.spriteX,\n      this.spriteY,\n      this.width,\n      this.height\n    );\n\n    if (this.game.debug) {\n      context.beginPath();\n      context.arc(\n        this.collisionX,\n        this.collisionY,\n        this.collisionRadius,\n        0,\n        Math.PI * 2\n      );\n      context.save();\n\n      context.globalAlpha = 0.5;\n\n      context.fill();\n\n      context.restore();\n      context.stroke();\n    }\n  }\n\n  update() {}\n}\n\nexport default Obstacle;\n","import Larva from \"./larva\";\n\nclass Egg {\n  constructor(game) {\n    this.game = game;\n    this.image = document.getElementById(\"egg\");\n    this.collisionRadius = 30;\n    this.margin = this.collisionRadius * 2;\n    this.collisionX =\n      this.margin + Math.random() * (this.game.width - this.margin * 2);\n    this.collisionY =\n      this.game.topMargin +\n      Math.random() * (this.game.height - this.game.topMargin - this.margin);\n    this.spriteWidth = 110;\n    this.spriteHeight = 135;\n    this.width = this.spriteWidth;\n    this.height = this.spriteHeight;\n    this.spriteX;\n    this.spriteY;\n    this.hatchTimer = 0;\n    this.hatchInterval = 10000;\n    this.markedForDeletion = false;\n  }\n\n  draw(context) {\n    context.drawImage(this.image, this.spriteX, this.spriteY);\n\n    if (this.game.debug) {\n      context.beginPath();\n      context.arc(\n        this.collisionX,\n        this.collisionY,\n        this.collisionRadius,\n        0,\n        Math.PI * 2\n      );\n      context.save();\n\n      context.globalAlpha = 0.5;\n\n      context.fill();\n\n      context.restore();\n      context.stroke();\n\n      const displayTime = (this.hatchTimer * 0.001).toFixed(0);\n      context.fillText(\n        displayTime,\n        this.collisionX,\n        this.collisionY - this.collisionRadius * 2.5\n      );\n    }\n  }\n\n  update(deltaTime) {\n    this.spriteX = this.collisionX - this.width * 0.5;\n    this.spriteY = this.collisionY - this.height * 0.5 - 30;\n\n    const collisionObjects = [\n      ...this.game.obstacles,\n      ...this.game.toads,\n      ...this.game.hatchlings,\n      this.game.player,\n    ];\n\n    collisionObjects.forEach((obstacle) => {\n      const { collision, distance, sumOfRadii, dx, dy } =\n        this.game.checkCollision(this, obstacle);\n\n      if (collision) {\n        const unitX = dx / distance;\n        const unitY = dy / distance;\n\n        this.collisionX = obstacle.collisionX + (sumOfRadii + 1) * unitX;\n        this.collisionY = obstacle.collisionY + (sumOfRadii + 1) * unitY;\n      }\n    });\n\n    if (\n      (this.hatchTimer > this.hatchInterval ||\n        this.collisionY < this.game.topMargin) &&\n      !this.game.over\n    ) {\n      this.game.hatchlings.push(\n        new Larva(this.game, this.collisionX, this.collisionY)\n      );\n      this.markedForDeletion = true;\n      this.game.removeGameObjects();\n    } else {\n      this.hatchTimer += deltaTime;\n    }\n  }\n}\n\nexport default Egg;\n","class Larva {\n  constructor(game, posX, posY) {\n    this.game = game;\n    this.image = document.getElementById(\"larva\");\n    this.collisionRadius = 30;\n    this.speedY = Math.random() + 1;\n    this.spriteWidth = 150;\n    this.spriteHeight = 150;\n    this.width = this.spriteWidth;\n    this.height = this.spriteHeight;\n    this.collisionX = posX;\n    this.collisionY = posY;\n    this.spriteX = this.collisionX - this.width * 0.5;\n    this.spriteY = this.collisionY - this.height * 0.5 - 30;\n    this.frameX = 0;\n    this.frameY = Math.floor(Math.random() * 2);\n    this.markedForDeletion = false;\n  }\n\n  draw(context) {\n    context.drawImage(\n      this.image,\n      this.frameX * this.spriteWidth,\n      this.frameY * this.spriteHeight,\n      this.spriteWidth,\n      this.spriteHeight,\n      this.spriteX,\n      this.spriteY,\n      this.spriteWidth,\n      this.spriteHeight\n    );\n\n    if (this.game.debug) {\n      context.beginPath();\n      context.arc(\n        this.collisionX,\n        this.collisionY,\n        this.collisionRadius,\n        0,\n        Math.PI * 2\n      );\n      context.save();\n\n      context.globalAlpha = 0.5;\n\n      context.fill();\n\n      context.restore();\n      context.stroke();\n    }\n  }\n\n  update() {\n    this.spriteX = this.collisionX - this.width * 0.5;\n    this.spriteY = this.collisionY - this.height * 0.5 - 40;\n    this.collisionY -= this.speedY;\n\n    /**\n     *  Check and remove #Larva when moves to safety\n     */\n    if (this.spriteY + (this.height - this.game.topMargin) < 0) {\n      this.markedForDeletion = true;\n      this.game.removeGameObjects();\n\n      if (!this.game.over) this.game.score++;\n    }\n\n    /**\n     *  Movement physics for #Larva on collision with #Player & #Obstacles\n     */\n    const collisionObjects = [...this.game.obstacles, this.game.player];\n    collisionObjects.forEach((object) => {\n      const { collision, distance, sumOfRadii, dx, dy } =\n        this.game.checkCollision(this, object);\n      if (collision) {\n        const unitX = dx / distance;\n        const unitY = dy / distance;\n        this.collisionX = object.collisionX + (sumOfRadii + 1) * unitX;\n        this.collisionY = object.collisionY + (sumOfRadii + 1) * unitY;\n      }\n    });\n\n    /**\n     *  Movement physics for #Larva on collision with #Toads\n     */\n    const collisionEnemies = [...this.game.toads];\n    collisionEnemies.forEach((object) => {\n      const { collision } = this.game.checkCollision(this, object);\n      if (collision) {\n        this.markedForDeletion = true;\n        this.game.removeGameObjects();\n\n        this.game.lostHatchlings++;\n      }\n    });\n  }\n}\n\nexport default Larva;\n","class Toad {\n  constructor(game) {\n    this.game = game;\n    this.image = document.getElementById(\"toad\");\n    this.collisionRadius = 30;\n    this.speedX = Math.random() * 3 + 0.5;\n    this.margin = this.collisionRadius * 2;\n    this.spriteWidth = 140;\n    this.spriteHeight = 260;\n    this.width = this.spriteWidth;\n    this.height = this.spriteHeight;\n    this.collisionX =\n      this.game.width + this.width + Math.random() * this.game.width * 0.5;\n    this.collisionY =\n      this.game.topMargin +\n      Math.random() * (this.game.height - this.game.topMargin - this.margin);\n    this.spriteX = this.collisionX - this.width * 0.5;\n    this.spriteY = this.collisionY - this.height * 0.5 - 30;\n    this.frameX = 0;\n    this.frameY = Math.floor(Math.random() * 4);\n  }\n\n  draw(context) {\n    context.drawImage(\n      this.image,\n      this.frameX * this.spriteWidth,\n      this.frameY * this.spriteHeight,\n      this.spriteWidth,\n      this.spriteHeight,\n      this.spriteX,\n      this.spriteY,\n      this.spriteWidth,\n      this.spriteHeight\n    );\n\n    if (this.game.debug) {\n      context.beginPath();\n      context.arc(\n        this.collisionX,\n        this.collisionY,\n        this.collisionRadius,\n        0,\n        Math.PI * 2\n      );\n      context.save();\n\n      context.globalAlpha = 0.5;\n\n      context.fill();\n\n      context.restore();\n      context.stroke();\n    }\n  }\n\n  update() {\n    this.spriteX = this.collisionX - this.width * 0.5;\n    this.spriteY = this.collisionY - this.height * 0.5 - 60;\n    this.collisionX -= this.speedX;\n\n    if (this.spriteX + this.width < 0 && !this.game.over) {\n      this.collisionX =\n        this.game.width + this.width + Math.random() * this.game.width * 0.5;\n      this.collisionY =\n        this.game.topMargin +\n        Math.random() * (this.game.height - this.game.topMargin - this.margin);\n      this.frameY = Math.floor(Math.random() * 4);\n    }\n\n    const collisionObjects = [...this.game.obstacles, this.game.player];\n    collisionObjects.forEach((obstacle) => {\n      const { collision, distance, sumOfRadii, dx, dy } =\n        this.game.checkCollision(this, obstacle);\n      if (collision) {\n        const unitX = dx / distance;\n        const unitY = dy / distance;\n        this.collisionX = obstacle.collisionX + (sumOfRadii + 1) * unitX;\n        this.collisionY = obstacle.collisionY + (sumOfRadii + 1) * unitY;\n      }\n    });\n  }\n}\n\nexport default Toad;\n","export const drawText = ({\n  context,\n  content,\n  posX,\n  posY,\n  align,\n  fontStyle,\n}) => {\n  context.font = fontStyle;\n  context.textAlign = align;\n  context.fillText(content, posX, posY);\n};\n","import { LOSING_SCORE, WINNING_SCORE } from \"../constants/game_constants\";\n\nexport const getRandomPositionArray = ({\n  gameWidth,\n  gameHeight,\n  verticalMargin = 0,\n  horizontalMargin = 0,\n  size,\n  count,\n  distanceBuffer = 0,\n}) => {\n  let positions = [];\n  for (let attemps = 0; attemps < 500 && count > 0; attemps++) {\n    const posX = Math.random() * gameWidth;\n    const posY = Math.random() * gameHeight;\n\n    let hasOverlap = false;\n    for (let posIndex = 0; posIndex < positions.length; posIndex++) {\n      const prevObstacle = positions[posIndex];\n\n      const dx = prevObstacle.posX - posX;\n      const dy = prevObstacle.posY - posY;\n\n      const distance = Math.hypot(dy, dx);\n\n      if (distance < Math.max(size * 2, distanceBuffer)) {\n        hasOverlap = true;\n        break;\n      }\n    }\n\n    if (\n      !hasOverlap &&\n      posX > horizontalMargin + size * 2 &&\n      posY > verticalMargin + size * 2 &&\n      posX < gameWidth - size &&\n      posY < gameHeight\n    ) {\n      positions.push({\n        posX: posX,\n        posY: posY,\n      });\n      count--;\n    }\n  }\n\n  return positions;\n};\n\nexport const isGameOver = ({ score = 0, lostHatchlings = 0 }) => {\n  return score >= WINNING_SCORE || lostHatchlings >= LOSING_SCORE;\n};\n\nexport const getGameOverContent = ({ score = 0, lostHatchlings }) => {\n  const restartText = \"Press 'R' to restart the game\";\n\n  if (score >= WINNING_SCORE) {\n    return {\n      title: \"AWESOME!!!\",\n      description: `You nailed it with ${score} points!`,\n      restartText,\n    };\n  }\n\n  if (score >= Math.floor(WINNING_SCORE * 0.9)) {\n    return {\n      title: \"SO CLOSE!!!\",\n      description: `Almost there with ${score} points!`,\n      restartText,\n    };\n  }\n\n  return {\n    title: \"OOPS!!!\",\n    description: `You lost ${lostHatchlings} hatchlings!`,\n    restartText,\n  };\n};\n","/**\n *  Minimum required score for victory\n */\nexport const WINNING_SCORE = 30;\n\n/**\n *  Minimum lost hatchlings for defeat\n */\nexport const LOSING_SCORE = 15;\n"],"names":["$9d07393aaa24a623$export$63c0fd2415399f0d","dx","dy","angleInRadians","Math","atan2","$0017c5d798155445$export$2616165974278734","constructor","game","image","document","getElementById","collisionX","mouse","posX","collisionY","posY","collisionRadius","speedX","speedY","speedModifier","playerWidth","playerheight","width","height","spriteX","spriteY","frameX","frameY","draw","context","drawImage","debug","beginPath","arc","PI","save","globalAlpha","fill","restore","moveTo","lineTo","stroke","update","distance","hypot","topMargin","obstacles","forEach","obstacle","collision","sumOfRadii","checkCollision","$64c0ae715ddfc4e3$export$2e2bcd8739ae039","position","obstacleWidth","obstacleHeight","floor","random","$3b186e545e47b541$export$2e2bcd8739ae039","spriteWidth","spriteHeight","markedForDeletion","removeGameObjects","over","score","collisionObjects","player","object","collisionEnemies","toads","lostHatchlings","$82a7e179f894b03b$export$2e2bcd8739ae039","margin","hatchTimer","hatchInterval","displayTime","toFixed","fillText","deltaTime","hatchlings","push","$dcb2be3ebd4ef55d$export$2e2bcd8739ae039","$7fee6969fa349124$export$b11bd9a0808bdc9","content","align","fontStyle","font","textAlign","$384a512539b7cccf$export$6e76c1248b602b23","gameWidth","gameHeight","verticalMargin","horizontalMargin","size","count","distanceBuffer","positions","attemps","hasOverlap","posIndex","length","prevObstacle","max","$384a512539b7cccf$export$9f1c65284a10fd65","$384a512539b7cccf$export$97f8cbad1fae839b","restartText","title","description","$55b76b594f4baf04$export$985739bfa5723e08","canvas","obstaclesCount","obstacleMinSpacing","eggs","eggTimer","eggInterval","eggCountMax","toadCountMax","pressed","addEventListener","e","offsetX","offsetY","window","key","init","obstaclesPositions","addToads","addEgg","filter","egg","hatchling","objectA","objectB","render","gameObjects","sort","fillStyle","fillRect","shadowColor","shadowOffsetX","shadowOffsetY","getContext","strokeStyle","lastTimeStamp","animate","timestamp","clearRect","requestAnimationFrame"],"version":3,"file":"index.51f2a1fe.js.map"}